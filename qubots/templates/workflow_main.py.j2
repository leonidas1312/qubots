#!/usr/bin/env python3
"""
{{ workflow.name }}
{{ workflow.description }}

Generated by Qubots Code Generator
Created: {{ timestamp }}
Author: {{ workflow.author }}
"""

{% for import in imports %}
{{ import }}
{% endfor %}
import json
import time
from pathlib import Path


def main():
    """Main workflow execution function."""
    print("üöÄ Starting {{ workflow.name }}")
    print("=" * 50)

    start_time = time.time()

    {% if problems %}
    # Load Problems
    {% for problem in problems %}
    print("üìä Loading {{ problem.name }}...")
    {{ problem.id }} = AutoProblem.from_repo("{{ problem.repository }}"{% if problem.parameters %},
        override_params={{ problem.parameters | tojson }}{% endif %})
    print(f"‚úÖ Loaded: {{{ problem.id }}.metadata.name}")
    {% endfor %}

    {% endif %}
    {% if optimizers %}
    # Load Optimizers
    {% for optimizer in optimizers %}
    print("üß† Loading {{ optimizer.name }}...")
    {{ optimizer.id }} = AutoOptimizer.from_repo("{{ optimizer.repository }}"{% if optimizer.parameters %},
        override_params={{ optimizer.parameters | tojson }}{% endif %})
    print(f"‚úÖ Loaded: {{{ optimizer.id }}.metadata.name}")
    {% endfor %}

    {% endif %}
    {% if problems and optimizers %}
    # Execute Optimization
    print("üîÑ Running optimization...")
    {% for step in execution_graph %}
    {% if step.type == "optimizer" and step.dependencies %}
    {% set problem_id = step.dependencies[0] %}
    result_{{ step.node_id }} = {{ step.node_id }}.optimize({{ problem_id }})
    print(f"üìà {{ step.name }} completed:")
    print(f"   Best value: {result_{{ step.node_id }}.best_value}")
    print(f"   Runtime: {result_{{ step.node_id }}.runtime_seconds:.3f}s")
    print(f"   Status: {result_{{ step.node_id }}.termination_reason}")
    {% endif %}
    {% endfor %}
    {% else %}
    print("‚ö†Ô∏è  Add both problems and optimizers to run optimization")
    {% endif %}

    total_time = time.time() - start_time
    print(f"\n‚è±Ô∏è  Total execution time: {total_time:.3f} seconds")
    print("‚úÖ Workflow completed successfully!")


if __name__ == "__main__":
    main()
